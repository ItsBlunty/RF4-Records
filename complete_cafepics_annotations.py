#!/usr/bin/env python3
"""
Complete OCR Training Data Annotations for all cafe pics
Generated by Claude after reading each image
"""

import os
import json
import shutil

# Complete annotations for all cafe order images
ALL_CAFE_ANNOTATIONS = {
    # Original test images
    "copper1.png": {
        "location": "Copper Lake",
        "orders": [
            {"fish": "Common Roach", "quantity": "6", "mass": "50 g", "price": "15.86"},
            {"fish": "Ide", "quantity": "1", "mass": "650 g", "price": "16.36"},
            {"fish": "Bleak", "quantity": "4", "mass": "20 g", "price": "17.04"},
            {"fish": "Mirror Carp", "quantity": "1", "mass": "4 kg", "price": "30.39"},
            {"fish": "Common Roach", "quantity": "7", "mass": "300 g", "price": "30.80"},
            {"fish": "Bleak", "quantity": "5", "mass": "72 g", "price": "55.16"},
            {"fish": "Kvolsdorfsky tench", "quantity": "1", "mass": "750 g", "price": "90.41"},
            {"fish": "Pike", "quantity": "2", "mass": "2 kg", "price": "126.71"},
            {"fish": "Chub", "quantity": "1", "mass": "5 kg", "price": "217.64"},
            {"fish": "Dinks mirror carp", "quantity": "1", "mass": "35 kg", "price": "796.04"}
        ]
    },
    "norway1.png": {
        "location": "Norwegian Sea",
        "orders": [
            {"fish": "Blue whiting", "quantity": "1", "mass": "900 g", "price": "63.77"},
            {"fish": "American plaice", "quantity": "1", "mass": "700 g", "price": "95.72"},
            {"fish": "Cusk", "quantity": "2", "mass": "2.5 kg", "price": "104.98"},
            {"fish": "Atlantic herring", "quantity": "1", "mass": "489 g", "price": "144.56"},
            {"fish": "Edible crab", "quantity": "1", "mass": "500 g", "price": "186.34"},
            {"fish": "Blue whiting", "quantity": "6", "mass": "549 g", "price": "220.13"},
            {"fish": "Small redfish", "quantity": "5", "mass": "1.799 kg", "price": "349.82"},
            {"fish": "Turbot", "quantity": "1", "mass": "14 kg", "price": "967.54"}
        ]
    },
    "norway2.png": {
        "location": "Norwegian Sea",
        "orders": [
            {"fish": "European hake", "quantity": "1", "mass": "1.5 kg", "price": "66.51"},
            {"fish": "Cusk", "quantity": "2", "mass": "2.5 kg", "price": "77.38"},
            {"fish": "Atlantic wolffish", "quantity": "1", "mass": "2 kg", "price": "97.43"},
            {"fish": "Saithe", "quantity": "4", "mass": "3 kg", "price": "148.93"},
            {"fish": "Blue whiting", "quantity": "6", "mass": "549 g", "price": "164.11"},
            {"fish": "Mussel", "quantity": "1", "mass": "84 g", "price": "194.37"},
            {"fish": "Cusk", "quantity": "1", "mass": "20.999 kg", "price": "619.06"},
            {"fish": "Pollock", "quantity": "1", "mass": "12.499 kg", "price": "737.54"}
        ]
    },
    # New screenshots
    "Screenshot 2025-07-10 082415.png": {
        "location": "Norwegian Sea",
        "orders": [
            {"fish": "Atlantic wolffish", "quantity": "1", "mass": "2 kg", "price": "70.18"},
            {"fish": "Blue whiting", "quantity": "6", "mass": "200 g", "price": "79.04"},
            {"fish": "Cusk", "quantity": "2", "mass": "2.5 kg", "price": "93.97"},
            {"fish": "Viviparous eelpout", "quantity": "2", "mass": "180 g", "price": "98.56"},
            {"fish": "Saithe", "quantity": "4", "mass": "3 kg", "price": "114.18"},
            {"fish": "Atlantic herring", "quantity": "1", "mass": "489 g", "price": "160.57"},
            {"fish": "Beaked redfish", "quantity": "1", "mass": "5 kg", "price": "598.93"},
            {"fish": "Northern wolffish", "quantity": "1", "mass": "13 kg", "price": "3,685.74"}
        ]
    },
    "Screenshot 2025-07-10 082442.png": {
        "location": "Norwegian Sea",
        "orders": [
            {"fish": "Longhead dab", "quantity": "1", "mass": "450 g", "price": "71.36"},
            {"fish": "Blue whiting", "quantity": "6", "mass": "200 g", "price": "102.24"},
            {"fish": "Atlantic mackerel", "quantity": "4", "mass": "400 g", "price": "124.16"},
            {"fish": "Atlantic mackerel", "quantity": "1", "mass": "2 kg", "price": "132.79"},
            {"fish": "Saithe", "quantity": "4", "mass": "3 kg", "price": "133.74"},
            {"fish": "American plaice", "quantity": "1", "mass": "2.349 kg", "price": "170.42"},
            {"fish": "Small redfish", "quantity": "5", "mass": "600 g", "price": "174.24"},
            {"fish": "Edible crab", "quantity": "1", "mass": "1.999 kg", "price": "738.70"}
        ]
    },
    "Screenshot 2025-07-10 082449.png": {
        "location": "Norwegian Sea", 
        "orders": [
            {"fish": "Sardine", "quantity": "3", "mass": "50 g", "price": "106.31"},
            {"fish": "Haddock", "quantity": "3", "mass": "1.5 kg", "price": "112.81"},
            {"fish": "European hake", "quantity": "1", "mass": "5.249 kg", "price": "121.65"},
            {"fish": "Atlantic mackerel", "quantity": "1", "mass": "2.399 kg", "price": "150.68"},
            {"fish": "Icelandic scallop", "quantity": "1", "mass": "224 g", "price": "161.57"},
            {"fish": "Viviparous eelpout", "quantity": "2", "mass": "539 g", "price": "206.98"},
            {"fish": "Saithe", "quantity": "4", "mass": "10.999 kg", "price": "238.35"},
            {"fish": "Beaked redfish", "quantity": "1", "mass": "5.5 kg", "price": "612.23"}
        ]
    },
    "Screenshot 2025-07-10 082458.png": {
        "location": "Norwegian Sea",
        "orders": [
            {"fish": "Cusk", "quantity": "2", "mass": "2.5 kg", "price": "87.89"},
            {"fish": "Blue whiting", "quantity": "6", "mass": "549 g", "price": "98.66"},
            {"fish": "Sardine", "quantity": "3", "mass": "50 g", "price": "113.64"},
            {"fish": "Atlantic wolffish", "quantity": "1", "mass": "2 kg", "price": "124.75"},
            {"fish": "Saithe", "quantity": "4", "mass": "3 kg", "price": "133.77"},
            {"fish": "Haddock", "quantity": "3", "mass": "1.5 kg", "price": "140.89"},
            {"fish": "Beaked redfish", "quantity": "1", "mass": "5 kg", "price": "443.28"},
            {"fish": "Small redfish", "quantity": "5", "mass": "600 g", "price": "488.43"}
        ]
    },
    "Screenshot 2025-07-10 082602.png": {
        "location": "Sura River",
        "orders": [
            {"fish": "Volga zander", "quantity": "1", "mass": "800 g", "price": "17.73"},
            {"fish": "Ide", "quantity": "1", "mass": "650 g", "price": "20.27"},
            {"fish": "Black-Dnieper roach", "quantity": "5", "mass": "120 g", "price": "32.63"},
            {"fish": "Pike", "quantity": "2", "mass": "2 kg", "price": "56.52"},
            {"fish": "Chub", "quantity": "1", "mass": "5 kg", "price": "67.61"},
            {"fish": "Wild Carp", "quantity": "1", "mass": "7 kg", "price": "88.31"},
            {"fish": "Sterlet", "quantity": "1", "mass": "1.399 kg", "price": "170.51"},
            {"fish": "Beluga", "quantity": "1", "mass": "23 kg", "price": "351.21"}
        ]
    },
    "Screenshot 2025-07-10 082622.png": {
        "location": "Sura River",
        "orders": [
            {"fish": "Common Roach", "quantity": "6", "mass": "50 g", "price": "17.04"},
            {"fish": "Black-Dnieper roach", "quantity": "5", "mass": "120 g", "price": "17.62"},
            {"fish": "Common dace", "quantity": "4", "mass": "150 g", "price": "23.42"},
            {"fish": "Chub", "quantity": "1", "mass": "3 kg", "price": "64.07"},
            {"fish": "Volga zander", "quantity": "1", "mass": "1.799 kg", "price": "82.31"},
            {"fish": "Caspian kutum", "quantity": "1", "mass": "1.5 kg", "price": "94.77"},
            {"fish": "Wild Carp", "quantity": "1", "mass": "11 kg", "price": "168.09"},
            {"fish": "Beluga", "quantity": "1", "mass": "72 kg", "price": "659.20"}
        ]
    },
    "Screenshot 2025-07-10 082652.png": {
        "location": "Sura River",
        "orders": [
            {"fish": "Ruffe", "quantity": "6", "mass": "20 g", "price": "10.22"},
            {"fish": "Ide", "quantity": "1", "mass": "650 g", "price": "15.71"},
            {"fish": "Perch", "quantity": "5", "mass": "100 g", "price": "19.62"},
            {"fish": "Common dace", "quantity": "4", "mass": "75 g", "price": "29.52"},
            {"fish": "Chub", "quantity": "1", "mass": "3 kg", "price": "47.48"},
            {"fish": "Chinese sleeper", "quantity": "1", "mass": "249 g", "price": "65.36"},
            {"fish": "Volga zander", "quantity": "1", "mass": "2.799 kg", "price": "68.51"},
            {"fish": "Asp", "quantity": "1", "mass": "9 kg", "price": "308.18"}
        ]
    },
    "Screenshot 2025-07-10 082946.png": {
        "location": "Sura River",
        "orders": [
            {"fish": "Tench", "quantity": "1", "mass": "650 g", "price": "12.44"},
            {"fish": "Common Roach", "quantity": "5", "mass": "50 g", "price": "13.54"},
            {"fish": "Gudgeon", "quantity": "3", "mass": "15 g", "price": "13.07"},
            {"fish": "Burbot", "quantity": "1", "mass": "1.2 kg", "price": "24.02"},
            {"fish": "Freshwater Crayfish", "quantity": "1", "mass": "140 g", "price": "34.42"},
            {"fish": "Zebra Mussel", "quantity": "1", "mass": "119 g", "price": "40.39"},
            {"fish": "Ruffe", "quantity": "5", "mass": "40 g", "price": "42.68"},
            {"fish": "Pike", "quantity": "2", "mass": "2 kg", "price": "126.84"},
            {"fish": "Asp", "quantity": "1", "mass": "10.999 kg", "price": "602.56"},
            {"fish": "Catfish", "quantity": "1", "mass": "100 kg", "price": "1,901.61"}
        ]
    },
    "Screenshot 2025-07-10 083006.png": {
        "location": "The Amber Lake",
        "orders": [
            {"fish": "Common Roach", "quantity": "6", "mass": "50 g", "price": "15.55"},
            {"fish": "Bleak", "quantity": "5", "mass": "29 g", "price": "21.92"},
            {"fish": "Mirror Carp", "quantity": "1", "mass": "4 kg", "price": "25.51"},
            {"fish": "Ruffe", "quantity": "4", "mass": "40 g", "price": "40.83"},
            {"fish": "Ide", "quantity": "1", "mass": "2.324 kg", "price": "45.99"},
            {"fish": "Bleak", "quantity": "6", "mass": "40 g", "price": "49.18"},
            {"fish": "White Bream", "quantity": "6", "mass": "140 g", "price": "49.48"},
            {"fish": "Common Roach", "quantity": "7", "mass": "749 g", "price": "50.39"},
            {"fish": "Ide", "quantity": "1", "mass": "4 kg", "price": "226.76"},
            {"fish": "Catfish", "quantity": "1", "mass": "160 kg", "price": "2,042.28"}
        ]
    }
}

def generate_ocr_ground_truth(annotation):
    """Generate OCR-style ground truth text from annotation"""
    lines = []
    orders = annotation['orders']
    location = annotation['location']
    
    # Determine row splits based on number of orders
    # Most images have 5-7 items in first row
    if len(orders) <= 5:
        first_row_count = len(orders)
    elif len(orders) <= 8:
        first_row_count = 5
    elif len(orders) == 10:
        first_row_count = 7  # Special case for copper1.png style
    else:
        first_row_count = 5
    
    # First row
    if orders:
        # Fish names
        fish_names = [order['fish'] for order in orders[:first_row_count]]
        lines.append('\t'.join(fish_names))
        
        # Locations
        lines.append('\t'.join([location] * len(fish_names)))
        
        # Quantities
        quantities = [f"Quantity {order['quantity']} pcs" for order in orders[:first_row_count]]
        lines.append('\t'.join(quantities))
        
        # Masses
        masses = [f"Mass from {order['mass']}" for order in orders[:first_row_count]]
        lines.append('\t'.join(masses))
        
        # Prices (with $ symbol variations)
        prices = []
        for order in orders[:first_row_count]:
            price = order['price']
            # Add $ symbol randomly as it appears in some images
            if ',' not in price and float(price.replace(',', '')) > 100:
                prices.append(f"$ {price}")
            else:
                prices.append(price)
        lines.append('\t'.join(prices))
    
    # Second row if exists
    if len(orders) > first_row_count:
        remaining_orders = orders[first_row_count:]
        
        # Fish names
        fish_names = [order['fish'] for order in remaining_orders]
        lines.append('\t'.join(fish_names))
        
        # Locations
        lines.append('\t'.join([location] * len(fish_names)))
        
        # Quantities
        quantities = [f"Quantity {order['quantity']} pcs" for order in remaining_orders]
        lines.append('\t'.join(quantities))
        
        # Masses
        masses = [f"Mass from {order['mass']}" for order in remaining_orders]
        lines.append('\t'.join(masses))
        
        # Prices
        prices = []
        for order in remaining_orders:
            price = order['price']
            if ',' not in price and float(price.replace(',', '')) > 100:
                prices.append(f"$ {price}")
            else:
                prices.append(price)
        lines.append('\t'.join(prices))
    
    return '\n'.join(lines)

def create_complete_training_dataset(cafepics_dir="cafepics", output_dir="ocr_training_complete"):
    """Create complete training dataset from all annotations"""
    os.makedirs(output_dir, exist_ok=True)
    
    # Copy original test images if they exist
    for img in ["copper1.png", "norway1.png", "norway2.png"]:
        if os.path.exists(img):
            shutil.copy(img, os.path.join(output_dir, img))
    
    # Copy cafepics
    if os.path.exists(cafepics_dir):
        for img in os.listdir(cafepics_dir):
            if img.endswith('.png'):
                shutil.copy(os.path.join(cafepics_dir, img), os.path.join(output_dir, img))
    
    # Process each annotation
    successful = 0
    for image_name, annotation in ALL_CAFE_ANNOTATIONS.items():
        base_name = os.path.splitext(image_name)[0]
        
        # Generate ground truth text
        gt_text = generate_ocr_ground_truth(annotation)
        
        # Write ground truth text file
        gt_file = os.path.join(output_dir, f"{base_name}.gt.txt")
        with open(gt_file, 'w', encoding='utf-8') as f:
            f.write(gt_text)
        
        # Write JSON for reference
        json_file = os.path.join(output_dir, f"{base_name}.json")
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(annotation, f, indent=2, ensure_ascii=False)
        
        print(f"Created annotations for: {image_name}")
        successful += 1
    
    # Create manifest
    manifest_file = os.path.join(output_dir, "training_manifest.txt")
    with open(manifest_file, 'w') as f:
        for image_name in ALL_CAFE_ANNOTATIONS.keys():
            base_name = os.path.splitext(image_name)[0]
            f.write(f"{base_name}\n")
    
    # Create vocabulary file
    vocab_file = os.path.join(output_dir, "rf4_vocabulary.txt")
    vocab = set()
    
    # Extract all unique words
    for annotation in ALL_CAFE_ANNOTATIONS.values():
        vocab.add(annotation['location'])
        for order in annotation['orders']:
            for word in order['fish'].split():
                vocab.add(word)
    
    # Add common words
    vocab.update(['Quantity', 'Mass', 'from', 'pcs', 'kg', 'g'])
    
    with open(vocab_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(sorted(vocab)))
    
    print(f"\nCreated complete training dataset:")
    print(f"- {successful} image annotations")
    print(f"- Ground truth text files (.gt.txt)")
    print(f"- Reference JSON files")
    print(f"- Training manifest")
    print(f"- Vocabulary file")
    print(f"\nOutput directory: {output_dir}")
    
    return output_dir

if __name__ == "__main__":
    create_complete_training_dataset()